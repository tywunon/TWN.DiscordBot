@using OneOf
@using OneOf.Types
@using TWN.DiscordBot.ControlPanel.Components.Types
@using TWN.DiscordBot.ControlPanel.Controller

<div>
  <Button Color="ButtonColor.Primary" @onclick="()=> HandleAdd()"><Icon Name="IconName.DatabaseFillAdd"></Icon></Button>
  |
  <Button Color="ButtonColor.Primary" @onclick="()=> HandleReload()"><Icon Name="IconName.ArrowClockwise"></Icon></Button>
</div>
<hr />
<Grid @ref="dataGrid"
TItem="AnnouncementData"
Class="table table-hover border-top"
DataProvider="AnnouncementsDataProvider"
AllowDetailView="true">
  <GridColumns>
    <GridColumn HeaderText="" TItem="AnnouncementData" class="align-middle">
      <Button Color="ButtonColor.Primary" @onclick="() => HandleRun(context)"><Icon Name="IconName.PlayFill"></Icon></Button>
    </GridColumn>
    <GridColumn HeaderText="Twitch User" TItem="AnnouncementData" PropertyName="TwitchUser" class="align-middle">
      <Image Src="@context.AnnouncementTwitchUserData.ProfileImageUrl" IsResponsive="true" Class="rounded-circle img-fluid" Style="width: 25px; height: 25px" />
      <Badge Color="@GetBadgeColor(context.IsOnline)" Class="p-2">
        <Icon Name="IconName.Twitch" />
        <span class="p-2">
          @context.AnnouncementTwitchUserData.DisplayName
          @if (context.TwitchUser != context.AnnouncementTwitchUserData.DisplayName)
          {
            @string.Concat("\t", "(", context.TwitchUser, ")")
          }
        </span>
      </Badge>
    </GridColumn>
    <GridColumn HeaderText="Guild Name" TItem="AnnouncementData" PropertyName="GuildName" class="align-middle">
      <Image Src="@context.AnnouncementDiscordData.GuildIconUrl" IsResponsive="true" Class="rounded-circle img-fluid" Style="width: 25px; height: 25px" />
      <span class="p-2">@context.AnnouncementDiscordData.GuildName</span>
    </GridColumn>
    <GridColumn HeaderText="Channel Name" TItem="AnnouncementData" PropertyName="ChannelName" class="align-middle">
      <span>@context.AnnouncementDiscordData.ChannelName</span>
    </GridColumn>
    <GridColumn HeaderText="" TItem="AnnouncementData" class="align-middle">
      <Button Color="ButtonColor.Danger" @onclick="() => HandleDelete(context)"><Icon Name="IconName.TrashFill"></Icon></Button>
    </GridColumn>
  </GridColumns>

  <GridDetailView @ref="dataGridDetail" TItem="AnnouncementData">
    <Card Style="width:18rem;">
      <CardBody>
        <img class="rounded-top" src="@context.AnnouncementTwitchUserData.ProfileImageUrl" alt="placeholder" style="width:100%" />
        <CardTitle>@context.AnnouncementTwitchUserData.DisplayName</CardTitle>
        <CardSubTitle>@context.AnnouncementTwitchUserData.Login</CardSubTitle>
        <Button Color="ButtonColor.Primary" @onclick="async () => await GoToWebsiteAsync(context.AnnouncementTwitchUserData.Login)"><Icon Name="IconName.Twitch"></Icon><span>Twitch</span></Button>
      </CardBody>
    </Card>
    <table>
      <tr><td>ID: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.ID</span></td></tr>
      <tr><td>Login: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.Login</span></td></tr>
      <tr><td>DisplayName: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.DisplayName</span></td></tr>
      <tr><td>Type: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.Type</span></td></tr>
      <tr><td>BroadcasterType: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.BroadcasterType</span></td></tr>
      <tr><td>Description: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.Description</span></td></tr>
      <tr><td>ProfileImageUrl: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.ProfileImageUrl</span></td></tr>
      <tr><td>OfflineImageUrl: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.OfflineImageUrl</span></td></tr>
      <tr><td>ViewCount: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.ViewCount</span></td></tr>
      <tr><td>CreatedAt: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.CreatedAt</span></td></tr>
    </table>
    @if (context.IsOnline)
    {
      <hr />
      <table>
        <tr><td>ID </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.ID  </span></td></tr>
        <tr><td>UserID </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.UserID  </span></td></tr>
        <tr><td>UserLogin </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.UserLogin  </span></td></tr>
        <tr><td>UserName </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.UserName  </span></td></tr>
        <tr><td>GameID </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.GameID  </span></td></tr>
        <tr><td>GameName </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.GameName  </span></td></tr>
        <tr><td>Type </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.Type  </span></td></tr>
        <tr><td>Title </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.Title  </span></td></tr>
        <tr><td>ViewerCount </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.ViewerCount  </span></td></tr>
        <tr><td>StartedAt </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.StartedAt  </span></td></tr>
        <tr><td>Language </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.Language  </span></td></tr>
        <tr><td>ThumbnailUrl </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.ThumbnailUrl  </span></td></tr>
        <tr>
          <td>TagIDs </td>
          <td><span class="p-2"> @(string.Join(',', context.AnnouncementTwitchStreamData.TagIDs))  </span></td>
        </tr>
        <tr>
          <td>Tags </td>
          <td><span class="p-2"> @(string.Join(',', context.AnnouncementTwitchStreamData.Tags))  </span></td>
        </tr>
        <tr><td>IsMature </td><td><span class="p-2"> @context.AnnouncementTwitchStreamData.IsMature  </span></td></tr>
      </table>
    }
    else
    {
      <tr><td>OfflineImageUrl: </td><td><span class="p-2">@context.AnnouncementTwitchUserData.OfflineImageUrl</span></td></tr>
    }
  </GridDetailView>
</Grid>

<AddAnnouncmentDialog @ref="addAnnouncementDialog" DataSelector="@GetAddDialogData" ResultCallback="@AddAnnouncmentDialogCallback"/>

<ConfirmDialog @ref="deleteConfirmDialog" />

@code
{
  [Inject] ToastService ToastService { get; set; } = default!;
  private Grid<AnnouncementData> dataGrid = default!;
  private GridDetailView<Controller.AnnouncementData> dataGridDetail = default!;
  private ConfirmDialog deleteConfirmDialog = default!;
  private AddAnnouncmentDialog addAnnouncementDialog = default!;

  private static IconColor GetIconColor(bool isOnline) => isOnline ? IconColor.Success : IconColor.Danger;
  private static BadgeColor GetBadgeColor(bool isOnline) => isOnline ? BadgeColor.Success : BadgeColor.Danger;

  private Task NotifySuccess(string twitchUser, AddDialogData dialogData)
  {
    ToastService.Notify(new ToastMessage()
      {
        Type = ToastType.Success,
        Title = botName,
        HelpText = $"{DateTime.Now}",
        AutoHide = true,
        Message = $"Announcement for {twitchUser} in Channel {dialogData.ChannelName} on {dialogData.GuildName} added",
        IconName = IconName.Database,
      });
    return dataGrid.RefreshDataAsync();
  }

  private void NotifyError(Error<string> err, string twitchUser, AddDialogData dialogData)
  {
    ToastService.Notify(new ToastMessage()
      {
        Type = ToastType.Danger,
        Title = botName,
        HelpText = $"{DateTime.Now}",
        AutoHide = true,
        Message = $"Failed to add Announcement for {twitchUser} in Channel {dialogData.ChannelName} on {dialogData.GuildName}: {err.Value}",
        IconName = IconName.Database,
      });
  }
}